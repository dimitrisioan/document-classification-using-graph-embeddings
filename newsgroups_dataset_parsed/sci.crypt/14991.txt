lga
ncrypt
source
i
got
a
number
of
requests
for
code
so
here
it
is
its
written
in
asm
borland
tasm
will
do
tasm
lgaasm
tlink
t
lgaasm
the
code
lga
ncryption
c
by
nick
nassuphis
code
segment
assume
cscode
dscode
org
start
jmp
begin
gas
particle
assigment
bit
particle
moving
east
bit
particle
moving
west
bit
particle
moving
north
bit
particle
moving
south
bit
particle
moving
east
bit
particle
moving
west
bit
particle
moving
north
bit
particle
moving
south
collisiong
rules
gas
rules
if
e
w
and
n
s
then
ewns
if
n
s
and
e
w
then
nsew
for
nibbles
and
for
bytes
reflection
rules
just
swap
bits
along
directions
this
lookup
table
implements
two
particle
collisions
for
the
hpp
lattice
gas
hpprule
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
this
rule
implements
the
velocityreversal
needed
to
run
the
gas
evolution
in
reverse
its
called
a
wallrule
because
its
the
same
as
is
all
particles
hit
a
wall
head
on
wallrule
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
db
maxbyte
equ
lineno
equ
srcptr
dw
offset
desptr
dw
offset
savebuff
db
db
db
db
db
data
db
db
db
db
this
is
a
test
for
a
lattice
gas
based
encryption
db
algorithm
the
data
is
encoded
as
particles
of
a
db
digital
gas
whose
time
evolution
is
then
simulated
db
with
a
cellularautomaton
type
algorithm
decryption
db
can
be
achieved
by
running
the
simulation
in
reverse
db
a
thermodynamic
argument
ensures
that
even
if
a
single
db
bit
is
flipped
no
decryption
of
the
data
is
possible
db
db
after
the
gas
is
let
to
evolve
for
timesteps
db
one
can
either
run
the
reverse
evolution
by
pressing
db
space
or
flip
a
bit
and
then
run
by
pressing
db
db
for
a
cryptographic
application
the
key
would
consist
db
of
the
number
of
time
steps
and
the
time
and
location
db
of
specific
bit
inversions
db
db
db
db
db
fill
the
gas
with
a
piece
of
code
initgas
mov
dicssrcptr
mov
sioffset
data
mov
cxlineno
push
di
push
cx
mov
cxmaxbyte
mov
alcssi
mov
csdial
inc
si
inc
di
loop
pop
cx
pop
di
add
dimaxbyte
loop
mov
sicssrcptr
mov
dioffset
initgas
mov
mov
mov
byte
ptr
cssial
not
al
inc
si
loop
ret
display
gas
molecules
bouncing
around
showgas
push
es
push
si
push
di
push
cx
push
bx
mov
mov
esax
mov
sicssrcptr
mov
mov
add
push
cx
push
di
mov
cxmaxbyte
mov
alcssi
mov
byte
ptr
esdial
inc
si
add
dec
cx
jnz
pop
di
pop
cx
add
loop
pop
bx
pop
cx
pop
di
pop
si
pop
es
ret
cssi
sourse
of
data
csdi
destination
of
data
scanonemiddleline
first
byte
is
a
special
case
because
of
warparound
mov
al
is
the
assembled
byte
mov
bhcssimaxbyte
north
is
one
line
up
lower
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
bhcssimaxbyte
south
is
one
line
down
higher
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
middle
bytes
can
be
handled
in
a
loop
mov
mov
al
is
the
assembled
byte
mov
bhcssimaxbyte
north
is
one
line
up
lower
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
bhcssimaxbyte
south
is
one
line
down
higher
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
loop
last
byte
is
also
special
mov
al
is
the
assembled
byte
mov
bhcssimaxbyte
north
is
one
line
up
lower
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
bhcssimaxbyte
south
is
one
line
down
higher
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
ret
cssi
sourse
of
data
csdi
destination
of
data
scanfirstline
first
byte
is
a
special
case
because
of
warparound
mov
mov
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
bhcssimaxbyte
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
middle
bytes
can
be
handled
in
a
loop
mov
mov
al
is
the
assembled
byte
mov
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
bhcssimaxbyte
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
loop
last
byte
is
also
special
mov
al
is
the
assembled
byte
mov
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
bhcssimaxbyte
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
ret
cssi
sourse
of
data
csdi
destination
of
data
scanlastline
first
byte
is
a
special
case
because
of
warparound
mov
al
is
the
assembled
byte
mov
bhcssimaxbyte
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
middle
bytes
can
be
handled
in
a
loop
mov
mov
al
is
the
assembled
byte
mov
bhcssimaxbyte
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
loop
last
byte
is
also
special
mov
al
is
the
assembled
byte
mov
bhcssimaxbyte
and
and
at
bits
and
or
blbh
or
them
into
the
assembled
byte
mov
and
and
at
bits
and
or
blbh
place
the
stuff
into
al
mov
west
is
one
byte
left
lower
and
and
at
bits
and
or
blbh
mov
east
is
one
byte
right
higher
and
and
at
bits
and
or
blbh
mov
mov
albyte
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
ret
invert
all
velocities
in
the
gas
invertall
push
bx
push
cx
push
si
mov
sicssrcptr
mov
mov
cxlineno
push
cx
mov
cxmaxbyte
mov
blcssi
mov
albyte
ptr
csbx
offset
wallrule
mov
cssial
inc
si
loop
pop
cx
loop
pop
si
pop
cx
pop
bx
ret
iterateonce
mov
sicssrcptr
mov
dicsdesptr
mov
cssrcptrdi
mov
csdesptrsi
push
si
push
di
call
scanfirstline
pop
di
pop
si
add
simaxbyte
add
dimaxbyte
mov
dont
scan
first
and
last
push
si
push
di
push
cx
call
scanonemiddleline
pop
cx
pop
di
pop
si
add
simaxbyte
add
dimaxbyte
loop
push
si
push
di
call
scanlastline
pop
si
pop
di
ret
iterate
hpp
rule
cx
times
iterate
push
cx
call
iterateonce
pop
cx
call
showgas
loop
iterate
ret
iterate
hpp
rule
cx
times
iterateuntil
mov
mov
cxoffset
offset
mov
albyte
ptr
cssi
offset
xor
byte
ptr
cssi
offset
inc
si
loop
call
iterateonce
call
showgas
mov
sicssrcptr
mov
mov
mov
mov
mov
blbyte
ptr
cssi
mov
dlbyte
ptr
csbxwallrule
not
ah
xor
dlah
and
aldl
inc
si
loop
mov
mov
cxoffset
offset
mov
ahbyte
ptr
cssioffset
and
ahal
xor
byte
ptr
cssioffset
inc
si
loop
jmp
mov
axoffset
push
ax
ret
db
push
ax
push
bx
push
cx
push
dx
push
ds
mov
mov
dxcsmsgptr
int
pop
ds
pop
dx
pop
cx
pop
bx
pop
ax
ret
db
msgptr
dw
offset
msg
msg
db
this
message
is
printed
out
db
code
decrypted
using
data
from
the
db
which
was
applied
to
the
decoding
db
after
every
time
db
the
decoding
function
left
the
code
db
except
after
the
gas
evolution
had
db
reversed
the
times
equ
repetitions
are
enough
to
equilibrate
the
gas
begin
mov
mov
mov
mov
mov
int
mov
mov
mov
mov
int
call
initgas
call
showgas
mov
int
push
cx
mov
cxtimes
call
iterate
call
invertall
call
showgas
mov
int
cmp
jne
mov
sicssrcptr
xor
byte
ptr
mov
cxtimes
call
iterateuntil
call
invertall
call
showgas
mov
int
code
ends
end
start
