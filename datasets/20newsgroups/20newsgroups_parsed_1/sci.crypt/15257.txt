subject
re
source
of
random
bits
on
a
unix
workstation
for
your
application
what
you
can
do
is
to
encrypt
the
realtime
clock
value
with
a
secret
key
well
almost
if
i
only
had
to
solve
the
problem
for
myself
and
were
willing
to
have
to
type
in
a
second
password
the
secret
key
whenever
i
logged
in
it
could
work
however
im
trying
to
create
a
solution
that
anyone
can
use
and
which
once
installed
is
just
as
effortless
to
start
up
as
the
nonsolution
of
just
using
xhost
to
control
access
ive
got
religeous
problems
with
storing
secret
keys
on
multiuser
computers
for
a
good
discussion
of
cryptographically
good
random
number
generators
check
out
the
draftietfsecurityrandomnesstxt
internet
draft
available
at
your
local
friendly
internet
drafts
repository
thanks
for
the
pointer
it
was
good
reading
and
i
liked
the
idea
of
using
several
unrelated
sources
with
a
strong
mixing
function
however
unless
i
missed
something
the
only
source
they
suggested
aside
from
a
hardware
rng
that
seems
available
and
unguessable
by
an
intruder
when
a
unix
is
freshbooted
is
io
buffers
related
to
network
traffic
i
believe
my
solution
basically
uses
that
strategy
without
requiring
me
to
reach
into
the
kernel
a
reasonably
source
of
randomness
is
the
output
of
a
cryptographic
hash
function
eg
md
when
fed
with
a
large
amount
of
moreorless
random
data
for
example
running
md
on
devmem
is
a
slow
but
random
enough
source
of
random
bits
there
are
bound
to
be
bits
of
entropy
in
the
tens
or
hundreds
of
megabytes
of
data
in
a
modern
workstations
memory
as
a
fair
amount
of
them
are
system
timers
io
buffers
etc
i
heard
about
this
solution
and
it
sounded
good
then
i
heard
that
folks
were
experiencing
times
of
seconds
to
run
this
on
reasonablyconfigured
workstations
im
not
willing
to
add
that
much
delay
to
someones
login
process
my
approach
etherfindcompress
skip
k
takes
a
second
or
two
to
run
im
considering
writing
the
beall
and
endall
of
solutions
that
launches
the
md
and
simultaneously
tries
to
suck
bits
off
the
net
and
if
the
net
should
be
sitting
so
idle
that
it
cant
get
k
after
compression
before
md
finishes
use
the
md
this
way
i
could
have
guaranteed
good
bits
and
a
deterministic
upper
bound
on
login
time
and
still
have
the
common
case
of
login
take
only
a
couple
of
extra
seconds
bennett
