subject
re
lets
build
software
cryptophones
for
over
the
internet
in
graham
toal
writes
in
article
hal
finney
writes
i
tried
this
code
yesterday
on
my
sparcstation
elc
it
takes
over
seconds
to
compress
seconds
worth
of
speech
this
means
that
it
needs
to
be
optimized
by
over
a
factor
of
before
it
will
be
usable
in
even
a
halfduplex
mode
ouch
thanks
for
trying
it
the
following
program
is
a
very
quick
hack
i
created
a
few
months
ago
to
determine
whether
a
sun
sparcstation
ipc
could
perform
realtime
fullduplex
encrypted
audio
with
resulting
data
rates
sustainable
by
todays
modems
this
test
program
reads
linearlyencoded
audio
from
the
audio
device
compresses
it
with
gsm
compresses
frames
of
bit
samples
recorded
at
khz
into
bits
resulting
in
a
hz
frame
rate
encrypts
it
with
des
then
reverses
the
process
and
sends
the
reconstructed
audio
back
to
the
audio
device
the
compressed
encrypted
audio
stream
is
kbitss
my
sparcstation
ipc
not
exactly
a
very
fast
machine
these
days
certainly
slower
than
an
elc
would
just
barely
sustain
this
activity
audio
underruns
would
occcur
but
the
speech
was
very
intelligible
i
ran
it
as
a
realtime
process
to
get
the
best
results
remember
though
that
this
program
is
a
quick
hack
and
the
performance
can
certainly
be
improved
the
audio
compression
routines
can
be
ftpd
from
tubcstuberlinde
i
believe
look
for
gsm
or
toast
i
used
eric
youngs
des
implementation
but
i
no
longer
know
where
i
got
it
from
cheersgreg
cut
here
test
program
to
see
how
much
cpu
it
takes
for
secure
digital
audio
written
by
g
onufer
written
on
a
sun
ipc
running
solaris
with
a
sun
isdn
sbus
card
and
a
speakerbox
include
stdlibh
include
unistdh
include
fcntlh
include
stdioh
include
systypesh
include
sysaudioioh
include
stroptsh
include
gsmh
include
desh
booleant
svsaudioinitint
fd
audioinfot
previnfo
audioinfot
info
if
previnfo
null
if
ioctlfd
audiogetinfo
previnfo
perroraudiogetinfo
return
bfalse
audioinitinfoinfo
inforecordpause
btrue
infoplaypause
btrue
infoplaysamplerate
infoplayencoding
audioencodinglinear
infoplaychannels
infoplayprecision
inforecordsamplerate
inforecordencoding
audioencodinglinear
inforecordchannels
inforecordprecision
inforecordbuffersize
if
ioctlfd
audiosetinfo
info
perroraudiosetinfo
return
bfalse
if
ioctlfd
iflush
flushrw
perroriflush
return
bfalse
audioinitinfoinfo
inforecordpause
bfalse
infoplaypause
bfalse
if
ioctlfd
audiosetinfo
info
perroraudiosetinfo
return
bfalse
return
btrue
booleant
svsinint
ifd
gsm
handle
gsmbyte
buf
gsmsignal
sample
if
readifd
sample
sizeof
sample
sizeof
sample
fprintfstderr
svsin
short
readn
return
bfalse
gsmencodehandle
sample
buf
return
btrue
booleant
svsoutint
ofd
gsm
handle
gsmbyte
buf
gsmsignal
sample
if
gsmdecodehandle
buf
sample
fprintfstderr
svsout
gsmdecode
failedn
return
bfalse
if
writeofd
sample
sizeof
sample
sizeof
sample
fprintfstderr
svsout
short
writen
return
bfalse
return
btrue
main
gsm
handle
gsmframe
frame
int
audiofd
int
option
descblock
key
ivecin
ivecout
deskeyschedule
ksin
ksout
descblock
cbufin
cbufout
cbufbuf
audiofd
opendevaudio
ordwr
if
audiofd
perroropen
exit
initialize
gsm
compression
code
if
handle
gsmcreate
null
fprintfstderr
svs
gsmcreate
failedn
exit
option
btrue
if
gsmoptionhandle
gsmoptfast
option
fprintfstderr
svs
gsmoption
fast
failedn
exit
initialize
des
code
desrandomkeykey
if
dessetkeykey
ksin
fprintfstderr
svs
dessetkey
failedn
exit
if
dessetkeykey
ksout
fprintfstderr
svs
dessetkey
failedn
exit
memsetivecin
sizeof
ivecin
memsetivecout
sizeof
ivecout
open
audio
device
and
configure
it
if
svsaudioinitaudiofd
null
exit
for
get
samples
bit
linear
hz
and
convert
to
a
byte
frame
if
svsinaudiofd
handle
frame
exit
encryptdecrypt
block
descbcencryptframe
cbufout
long
ksin
ivecin
desencrypt
descbcencryptcbufout
cbufbuf
long
ksout
ivecout
desdecrypt
memmoveframe
cbufbuf
if
if
memcmpcbufin
cbufbuf
fprintfstderr
svs
memcmp
failedn
exit
endif
take
byte
frame
and
convert
to
samples
and
play
if
svsoutaudiofd
handle
frame
exit
gsmdestroyhandle
cut
here
