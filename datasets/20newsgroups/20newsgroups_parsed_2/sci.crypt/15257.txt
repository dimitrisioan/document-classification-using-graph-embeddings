subject
source
random
bits
unix
workstation
application
encrypt
realtime
clock
value
secret
key
well
almost
solve
problem
willing
type
second
password
secret
key
whenever
logged
could
work
however
im
trying
create
solution
anyone
use
installed
effortless
start
nonsolution
using
xhost
control
access
ive
got
religeous
problems
storing
secret
keys
multiuser
computers
good
discussion
cryptographically
good
random
number
generators
check
draftietfsecurityrandomnesstxt
internet
draft
available
local
friendly
internet
drafts
repository
thanks
pointer
good
reading
liked
idea
using
several
unrelated
sources
strong
mixing
function
however
unless
missed
something
source
suggested
aside
hardware
rng
seems
available
unguessable
intruder
unix
freshbooted
io
buffers
related
network
traffic
believe
solution
basically
uses
strategy
without
requiring
reach
kernel
reasonably
source
randomness
output
cryptographic
hash
function
eg
md
fed
large
amount
moreorless
random
data
example
running
md
devmem
slow
random
enough
source
random
bits
bound
bits
entropy
tens
hundreds
megabytes
data
modern
workstations
memory
fair
amount
system
timers
io
buffers
etc
heard
solution
sounded
good
heard
folks
experiencing
times
seconds
run
reasonablyconfigured
workstations
im
willing
add
much
delay
someones
login
process
approach
etherfindcompress
skip
k
takes
second
two
run
im
considering
writing
beall
endall
solutions
launches
md
simultaneously
tries
suck
bits
net
net
sitting
idle
cant
get
k
compression
md
finishes
use
md
way
could
guaranteed
good
bits
deterministic
upper
bound
login
time
still
common
case
login
take
couple
extra
seconds
bennett
