subject
lets
build
software
cryptophones
internet
graham
toal
writes
article
hal
finney
writes
tried
code
yesterday
sparcstation
elc
takes
seconds
compress
seconds
worth
speech
means
needs
optimized
factor
usable
even
halfduplex
mode
ouch
thanks
trying
following
program
quick
hack
created
months
ago
determine
whether
sun
sparcstation
ipc
could
perform
realtime
fullduplex
encrypted
audio
resulting
data
rates
sustainable
todays
modems
test
program
reads
linearlyencoded
audio
audio
device
compresses
gsm
compresses
frames
bit
samples
recorded
khz
bits
resulting
hz
frame
rate
encrypts
des
reverses
process
sends
reconstructed
audio
back
audio
device
compressed
encrypted
audio
stream
kbitss
sparcstation
ipc
exactly
fast
machine
days
certainly
slower
elc
would
barely
sustain
activity
audio
underruns
would
occcur
speech
intelligible
ran
realtime
process
get
best
results
remember
though
program
quick
hack
performance
certainly
improved
audio
compression
routines
ftpd
tubcstuberlinde
believe
look
gsm
toast
used
eric
youngs
des
implementation
longer
know
got
cheersgreg
cut
test
program
see
much
cpu
takes
secure
digital
audio
written
g
onufer
written
sun
ipc
running
solaris
sun
isdn
sbus
card
speakerbox
include
stdlibh
include
unistdh
include
fcntlh
include
stdioh
include
systypesh
include
sysaudioioh
include
stroptsh
include
gsmh
include
desh
booleant
svsaudioinitint
fd
audioinfot
previnfo
audioinfot
info
previnfo
null
ioctlfd
audiogetinfo
previnfo
perroraudiogetinfo
return
bfalse
audioinitinfoinfo
inforecordpause
btrue
infoplaypause
btrue
infoplaysamplerate
infoplayencoding
audioencodinglinear
infoplaychannels
infoplayprecision
inforecordsamplerate
inforecordencoding
audioencodinglinear
inforecordchannels
inforecordprecision
inforecordbuffersize
ioctlfd
audiosetinfo
info
perroraudiosetinfo
return
bfalse
ioctlfd
iflush
flushrw
perroriflush
return
bfalse
audioinitinfoinfo
inforecordpause
bfalse
infoplaypause
bfalse
ioctlfd
audiosetinfo
info
perroraudiosetinfo
return
bfalse
return
btrue
booleant
svsinint
ifd
gsm
handle
gsmbyte
buf
gsmsignal
sample
readifd
sample
sizeof
sample
sizeof
sample
fprintfstderr
svsin
short
readn
return
bfalse
gsmencodehandle
sample
buf
return
btrue
booleant
svsoutint
ofd
gsm
handle
gsmbyte
buf
gsmsignal
sample
gsmdecodehandle
buf
sample
fprintfstderr
svsout
gsmdecode
failedn
return
bfalse
writeofd
sample
sizeof
sample
sizeof
sample
fprintfstderr
svsout
short
writen
return
bfalse
return
btrue
main
gsm
handle
gsmframe
frame
int
audiofd
int
option
descblock
key
ivecin
ivecout
deskeyschedule
ksin
ksout
descblock
cbufin
cbufout
cbufbuf
audiofd
opendevaudio
ordwr
audiofd
perroropen
exit
initialize
gsm
compression
code
handle
gsmcreate
null
fprintfstderr
svs
gsmcreate
failedn
exit
option
btrue
gsmoptionhandle
gsmoptfast
option
fprintfstderr
svs
gsmoption
fast
failedn
exit
initialize
des
code
desrandomkeykey
dessetkeykey
ksin
fprintfstderr
svs
dessetkey
failedn
exit
dessetkeykey
ksout
fprintfstderr
svs
dessetkey
failedn
exit
memsetivecin
sizeof
ivecin
memsetivecout
sizeof
ivecout
open
audio
device
configure
svsaudioinitaudiofd
null
exit
get
samples
bit
linear
hz
convert
byte
frame
svsinaudiofd
handle
frame
exit
encryptdecrypt
block
descbcencryptframe
cbufout
long
ksin
ivecin
desencrypt
descbcencryptcbufout
cbufbuf
long
ksout
ivecout
desdecrypt
memmoveframe
cbufbuf
memcmpcbufin
cbufbuf
fprintfstderr
svs
memcmp
failedn
exit
endif
take
byte
frame
convert
samples
play
svsoutaudiofd
handle
frame
exit
gsmdestroyhandle
cut
