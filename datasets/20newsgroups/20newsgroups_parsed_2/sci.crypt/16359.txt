subject
authentication
onetimepads
advanced
one
time
pad
article
bryan
olson
cmsc
g
writes
onetimepad
yeilds
ideal
security
wellknown
flaw
authentication
suppose
use
random
bit
stream
pad
exclusiveor
encryption
operation
adversary
knows
plaintext
message
change
message
heres
works
alice
sending
bob
plaintext
p
key
stream
alice
computes
ciphertext
c
xor
p
sends
bob
eve
knows
plainext
p
wants
message
appear
p
eve
intercepts
c
computes
c
c
xor
p
xor
p
xor
p
eve
sends
c
bob
bob
decrypts
c
computing
cxor
p
thus
receiving
false
message
substituted
eve
firstly
aside
agree
weakness
exists
lot
trouble
believing
represents
difficulty
real
life
given
purpose
onetime
pad
give
unbreakable
security
expense
key
distribution
etc
imply
clients
really
want
level
security
people
want
keep
p
secret
find
hard
believe
eve
might
happen
copy
p
lying
around
aware
argument
applies
eve
knowing
even
small
part
message
eve
must
know
exactly
bytes
c
known
susequence
starts
result
garbled
find
least
surprising
back
question
resources
use
onetimepad
transmissions
would
also
append
message
authentication
code
message
using
next
bits
onetimepad
key
perhaps
original
question
basically
asked
whether
way
authenticate
message
degree
security
pad
provided
dont
know
answer
however
would
propose
following
discussion
alice
bob
arbitrary
number
secret
random
bits
share
eve
doesnt
know
finds
effectively
knowing
p
corresponding
c
fact
correspond
causes
problem
message
authentication
code
created
using
onetimepad
operation
eve
could
know
parts
mac
affected
parts
input
would
unable
forge
mac
correspond
required
nonlinear
combiner
parts
message
nonlinear
simply
xoring
subtracting
whatever
doesnt
exactly
effect
end
encrypted
message
c
alice
appends
nbit
mac
computed
follows
means
next
full
chunk
one
time
pad
compute
c
p
xor
pad
nbit
boundary
break
c
nbit
chunks
set
mac
initialisation
vector
chunk
sequentially
set
mac
mac
nlop
ci
end
process
mac
message
authentication
code
bob
verifies
mac
obvious
manner
recovers
plaintext
p
uses
pad
reproduce
mac
manner
nlop
nonlinear
operator
rub
simplest
nonlinear
operator
think
sbox
fixed
even
published
permutation
nbit
integers
indexable
table
called
sbox
use
x
nlop
x
xor
sboxy
practically
speaking
think
solves
problem
eve
never
sees
intermediate
output
c
hence
cant
deduce
perform
valid
substitution
also
practically
speaking
want
mac
fairly
large
say
bits
might
want
gigabyte
say
sbox
might
work
bytesized
sboxes
think
irrelevant
detail
discussion
hand
first
point
errors
give
pointer
literature
greg
rose
australian
computing
communications
institute
use
standard
phrase
hijacked
may
inadvisable
caa
