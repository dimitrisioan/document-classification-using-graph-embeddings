subject
compwindowsxintrinsics
frequently
asked
questions
faq
archivename
xtfaq
version
id
faqxtv
ware
exp
x
toolkit
intrinsics
faq
monthly
posting
article
contains
answers
frequently
asked
questions
faq
compwindowsx
x
toolkit
intrinsics
submit
questions
preferably
answer
send
email
many
faqs
including
one
available
archive
site
rtfmmitedu
directory
pubusenetnewsanswers
name
faq
archived
appears
archivename
line
top
article
faq
archived
xtfaq
code
fragments
public
domain
contents
xt
glossary
software
versions
related
faqs
application
core
dump
use
signalsalarmscthreads
use
different
visual
default
visual
application
use
shell
widgets
visual
visual
depth
colormap
shells
inherit
ive
done
still
get
badmatch
error
doesnt
widget
get
destroyed
call
xtdestroywidget
exit
still
execute
destroycallbacks
resize
shell
widget
cant
xtappaddinput
handle
files
good
books
magazines
xt
widgets
available
alternatives
intrinsics
pass
float
value
xtsetvalues
write
resource
converter
open
multiple
displays
changed
r
r
r
resources
loaded
order
callbacks
executed
know
widget
visible
reparent
widget
xt
ie
xtreparentwidget
use
xtmalloc
xtfree
etc
debug
xt
application
dont
xtaddinput
xtaddtimeout
xtaddworkproc
work
implement
drag
drop
xt
glossary
xt
intrinsics
implement
object
oriented
interface
c
code
allow
useful
graphical
components
created
included
classes
provide
base
functionality
object
rectobj
core
composite
constraint
shell
overrideshell
wmshell
etc
terms
xt
intrinsics
used
interchangeably
however
used
precisely
mean
specific
library
x
window
system
particular
include
athena
motif
olit
widget
set
without
widgets
intrinsics
especially
useful
widget
refers
user
interface
abstraction
created
via
xt
precise
use
object
subclass
core
class
used
loosely
refer
anything
subclass
object
class
although
accurately
called
windowless
widgets
gadgets
xlib
c
interface
x
protocol
one
layer
xt
intrinsics
typically
widget
uses
relatively
xlib
functions
xt
provides
services
although
understanding
xlib
helps
problems
software
versions
following
latest
versions
xt
based
software
software
version
released
next
expected
xr
patch
none
xr
patch
athena
widgets
see
xr
motif
olit
xtra
xw
xr
none
xcu
xr
none
fwf
related
faqs
david
b
lewis
uunetcraftfaq
maintains
faq
x
posted
monthly
compwindowsx
located
export
contribfaq
liam
r
e
quin
posts
faq
list
open
look
compwindowsx
jan
newmarch
posts
faq
list
motif
compwindowsxmotif
peter
ware
posts
faq
list
compwindowsxintrinsics
export
contribfaqxt
application
core
dump
use
signalsalarmscthreads
brief
xlib
xt
widget
sets
mutual
exclusion
critical
sections
interrupt
handler
likely
leave
one
libraries
inconsistent
state
appropriate
flags
yet
set
dangling
pointers
middle
list
traversal
etc
note
ansi
c
standard
points
behavior
signal
handler
undefined
signal
handler
calls
function
signal
problem
specific
xlib
xt
posix
specification
mentions
functions
may
called
safely
may
assumed
functions
called
xlib
xt
functions
safe
way
deal
signals
set
flag
interrupt
handler
flag
later
needs
checked
either
work
procedure
timeout
callback
incorrect
add
either
interrupt
handler
another
note
dangerous
add
work
procedure
never
finishes
effectively
preempts
work
procedures
previously
added
never
called
another
option
open
pipe
tell
event
loop
read
end
using
xtappaddinput
signal
handler
write
byte
write
end
pipe
signal
however
could
deadlock
process
pipe
fills
dont
intrinsics
deal
problem
primarily
supposed
portable
layer
hardware
operating
system
good
enough
reason
dont
think
note
article
x
journal
example
oreilly
volume
error
use
different
visual
default
requires
complicated
answer
window
three
things
visual
specific
visual
colormap
border
pixmap
widgets
colormap
borderpixmap
resource
shell
widgets
visual
resources
another
questions
deals
shells
visual
default
value
resources
copyfromparent
exactly
says
shell
widget
copyfromparent
gets
evalulated
defaultvisualofscreen
defaultcolormapofscreen
one
three
resources
properly
set
badmatch
error
occurs
window
created
properly
set
values
depends
visual
used
get
work
two
parts
answer
first
want
application
start
particular
visual
second
want
particular
shell
within
application
start
different
visual
second
actually
easier
basic
information
need
available
first
little
harder
youll
need
initialize
much
toolkit
order
determine
needed
information
sample
code
start
application
using
something
default
visual
compile
cc
g
visualc
visual
lxaw
lxmu
lxt
lxext
lx
lm
run
visual
geometry
x
depth
visual
staticcolor
fg
blue
bg
yellow
need
move
mouse
get
particular
visuals
colormap
install
include
xintrinsich
include
xstringdefsh
include
xshellh
typedef
struct
visual
visual
int
depth
optionsrec
optionsrec
options
xtresource
resources
visual
visual
xtrvisual
sizeof
visual
xtoffsetof
optionsrec
visual
xtrimmediate
null
depth
depth
xtrint
sizeof
int
xtoffsetof
optionsrec
depth
xtrimmediate
null
xrmoptiondescrec
desc
visual
visual
xrmoptionseparg
null
depth
depth
xrmoptionseparg
null
int
main
argc
argv
int
argc
char
argv
xtappcontext
app
application
context
widget
top
toplevel
widget
display
dpy
display
char
xargv
saved
argument
vector
int
xargc
saved
argument
count
colormap
colormap
created
colormap
xvisualinfo
vinfo
template
find
visual
xvisualinfo
vinfolist
returned
list
visuals
int
count
number
matchs
arg
args
cardinal
cnt
char
name
test
char
class
test
save
command
line
arguments
xargc
argc
xargv
char
xtmalloc
argc
sizeof
char
bcopy
char
argv
char
xargv
argc
sizeof
char
following
creates
dummy
toplevel
widget
retrieve
appropriate
visual
resource
cnt
top
xtappinitialize
app
class
desc
xtnumber
desc
argc
argv
string
null
args
cnt
dpy
xtdisplay
top
cnt
xtgetapplicationresources
top
options
resources
xtnumber
resources
args
cnt
cnt
optionsvisual
optionsvisual
defaultvisualofscreen
xtscreen
top
xtsetarg
argscnt
xtnvisual
optionsvisual
cnt
create
appropriate
colormap
could
use
default
colormap
based
class
visual
could
examine
property
rootwindow
find
right
colormap
could
sorts
things
colormap
xcreatecolormap
dpy
rootwindowofscreen
xtscreen
top
optionsvisual
allocnone
xtsetarg
argscnt
xtncolormap
colormap
cnt
find
information
visual
vinfovisualid
xvisualidfromvisual
optionsvisual
vinfolist
xgetvisualinfo
dpy
visualidmask
vinfo
count
vinfolist
count
xtsetarg
argscnt
xtndepth
vinfolistdepth
cnt
xfree
xpointer
vinfolist
xtdestroywidget
top
create
real
toplevel
widget
xtsetarg
argscnt
xtnargv
xargv
cnt
xtsetarg
argscnt
xtnargc
xargc
cnt
top
xtappcreateshell
char
null
class
applicationshellwidgetclass
dpy
args
cnt
display
application
loop
handling
events
xtrealizewidget
top
xtappmainloop
app
return
visual
application
use
point
argued
one
opinion
way
application
know
appropriate
visual
specified
user
disagree
application
probably
falls
category
always
using
default
visual
hardware
specific
expects
particular
visual
bit
truecolor
overlayplane
extension
application
runs
isolation
depending
way
server
allocates
resources
may
always
want
application
run
truecolor
mode
going
mess
applications
may
upset
chooses
run
greyscale
instead
psuedocolor
monochrome
example
low
end
color
sun
server
many
different
possible
visuals
monochrome
entry
colormap
static
gray
static
color
truecolor
sgi
iriss
offer
plus
bit
truecolor
bit
truecolor
overlay
plane
shell
widgets
visual
strictly
convention
makes
possible
arbitrary
widget
know
visual
uses
found
looking
shell
widget
ancestor
obtaining
visual
shell
widget
visual
resource
must
realize
method
use
visual
calls
xcreatewindow
also
make
resource
obtained
xtgetvalues
widgets
find
reasonable
value
probably
xtnvisual
visual
depth
colormap
shells
inherit
default
value
resources
set
copyfromparent
interpreted
defaultcolormapofscreen
defaultdepthofscreen
default
visual
screen
widget
parent
ie
applicationshellwidgetclass
root
widget
tree
parent
widget
null
shell
copies
colormap
depth
parent
uses
copyfromparent
visual
ive
done
still
get
badmatch
error
resource
converters
improperly
cache
references
especially
true
xr
earlier
versions
motif
doesnt
widget
get
destroyed
call
xtdestroywidget
see
section
xt
specification
eventually
get
destroyed
immediately
intrinsics
destroy
widget
twophase
process
first
children
flag
set
indicate
destroyed
put
list
widgets
destroyed
way
pending
x
events
references
widget
cleaned
memory
actually
freed
second
phase
performed
callbacks
event
handlers
actions
completed
checking
next
x
event
point
list
traversed
widgets
memory
actually
freed
among
things
caveatstrivia
widgets
may
destroyed
intrinsics
determine
references
widgets
list
phase
destruction
occurs
immediately
also
nested
event
loops
used
widgets
placed
destroy
list
entering
inner
event
loop
destroyed
returning
outer
event
loop
exit
still
execute
destroycallbacks
problem
simple
entirely
reasonable
approach
exiting
application
used
calling
exit
directly
widget
may
chance
clean
external
state
open
sockets
temporary
files
allocated
x
resources
etc
code
simplicity
reasons
assumes
single
toplevel
widget
widget
toplevelget
gw
widget
gw
widget
find
toplevel
widget
top
top
gw
xtparent
top
top
xtparent
top
empty
return
top
void
exitcallback
gw
closure
calldata
widget
gw
widget
xtpointer
closure
data
app
specified
xtpointer
calldata
widget
specific
data
widget
toplevel
toplevel
toplevelget
gw
xtunmapwidget
toplevel
make
disappear
quickly
xtdestroywidget
toplevel
exit
one
see
code
exits
immediately
destroying
toplevel
widget
trouble
phase
destruction
may
never
occur
works
widgets
applications
work
widgets
external
state
might
think
since
works
always
work
remember
part
reason
object
oriented
approach
used
one
ignorant
implementation
details
widget
means
widget
may
change
someday
require
external
state
cleaned
destroy
callbacks
one
alternative
modify
exitcallback
set
global
flag
test
flag
private
event
loop
however
private
event
loops
frowned
upon
tends
encourage
sloppy
difficult
maintain
practices
try
following
code
instead
include
xintrinsich
extern
widget
toplevelget
needfunctionprototypes
widget
gw
endif
extern
boolean
exitworkproc
needfunctionprototypes
xtpointer
closure
endif
extern
void
exitcallback
needfunctionprototypes
widget
gw
xtpointer
closure
xtpointer
calldata
endif
widget
toplevelget
gw
widget
gw
widget
find
toplevel
widget
top
top
gw
xtparent
top
top
xtparent
top
empty
return
top
void
exitcallback
gw
closure
calldata
widget
gw
widget
xtpointer
closure
data
app
specified
xtpointer
calldata
widget
specific
data
widget
toplevel
toplevel
toplevelget
gw
xtunmapwidget
toplevel
make
disappear
quickly
xtdestroywidget
toplevel
xtappaddworkproc
xtwidgettoapplicationcontext
gw
exitworkproc
xtpointer
null
boolean
exitworkproc
closure
xtpointer
closure
exit
notreached
exitcallback
adds
work
procedure
get
called
application
next
idle
happens
events
processed
destroy
callbacks
executed
resize
shell
widget
realized
one
doesnt
resize
shell
widget
proper
thing
resize
currently
managed
child
shell
widget
using
xtsetvalues
geometry
change
propagated
shell
asks
window
manager
may
may
allow
request
however
shell
must
resource
xtnallowshellresize
set
true
otherwise
even
ask
window
manager
grant
request
shell
resize
change
position
shell
use
xtsetvalues
shell
child
within
limits
window
manager
granted
cant
xtappaddinput
handle
files
however
unix
semantics
io
ready
file
fit
peoples
intuitive
model
unix
terms
file
descriptor
ready
reading
whenever
read
call
would
block
ignoring
setting
optional
flags
indicate
block
works
expected
terminals
sockets
pipes
file
read
always
return
return
indicates
eof
ie
data
result
code
intrinsics
always
calls
input
handler
always
thinks
something
read
culprit
select
system
call
sysv
based
oss
poll
system
call
get
around
unix
system
best
approach
use
another
process
check
available
input
file
use
pipe
connect
application
process
pass
file
descriptor
pipe
xtappaddinput
suitable
program
bsd
systems
tail
f
filename
rumored
select
systems
completely
reliable
particular
ibm
aix
one
would
work
several
thousand
times
stop
event
woke
seemed
result
race
condition
kernel
ibm
claims
fix
pyramid
doesnt
work
ultrix
possibly
others
pipes
implemented
sockets
wasnt
completely
broken
although
writing
side
wrote
byte
blocks
reading
side
received
broken
put
pipe
byte
time
waste
lot
time
reading
small
blocks
get
raound
detecting
situation
select
ignore
pipe
mseconds
given
whole
block
note
descriptions
used
unix
terminology
read
file
descriptor
pipes
etc
os
dependent
area
may
identical
systems
however
intrinsic
designers
felt
common
enough
operation
included
part
toolkit
didnt
also
deal
signals
point
dont
know
good
books
magazines
xt
favorite
definitive
reference
perspective
offers
reasonable
introduction
also
goes
full
details
intrinsics
started
using
already
familiar
xt
concepts
behind
newcomers
may
may
find
useful
ive
always
found
accurate
complete
means
pages
asente
paul
j
swick
ralph
r
x
window
system
toolkit
complete
programmers
guide
specification
digital
press
isbn
order
number
eyeedp
prenticehall
isbn
also
available
dec
direct
digital
book
commonly
recomend
novices
young
doug
x
window
system
applications
programming
xt
motif
version
prentice
hall
isbn
isbn
course
oreilly
entire
series
manuals
x
xt
oreilly
ordering
particular
volume
xt
reference
done
manual
page
style
rd
edition
extensively
overhauled
goes
far
beyond
mit
manual
pages
im
finding
useful
particular
permutted
index
references
manual
pages
help
great
deal
chasing
related
information
read
two
periodicals
x
resource
x
journal
two
dealing
specifically
x
x
resource
published
quarterly
oreilly
one
issues
mit
x
consortium
technical
conference
proceedings
advertising
ive
found
informative
pretty
good
depth
orders
call
email
editorial
matters
email
table
contents
posted
mathutahedu
ftppubtexbib
tex
form
ftpuunet
ftppublishedoreillyxresource
ascii
form
x
journal
bimonthly
trade
rag
lots
advertising
articles
informative
oriented
toward
less
technical
audience
read
see
whats
going
expectation
learning
great
deal
remember
represent
fairly
small
percentage
people
also
pretty
good
collection
people
advisory
board
columnists
call
widgets
available
three
popular
widget
sets
athena
set
provided
x
sufficient
purposes
ugly
side
recently
look
available
ftp
exportlcsmiteducontribxawdtarz
motif
osf
available
license
fee
commonly
shipped
many
workstation
vendors
platforms
almost
everyone
sun
looks
good
works
well
personally
think
poorly
implemented
olit
open
look
intrinsics
toolkit
set
widgets
implementing
suns
open
look
specification
developed
att
ive
never
used
cant
comment
quality
ive
heard
rumours
pain
actually
get
addition
following
collection
widgets
also
available
xtra
library
widgets
sale
graphical
software
technology
includes
bar
graph
stacked
bar
graph
line
graph
pie
chart
xy
plot
hypertext
help
spreadsheet
data
entry
form
widgets
ive
never
seen
cant
comment
fwf
free
widget
foundation
attempting
collect
set
freely
available
widgets
included
pixmap
editor
filedialog
others
current
set
widgets
obtained
via
anonymous
ftp
machine
acsuiucedu
file
pubfwfsharz
xcu
cornell
university
widgets
gene
dykes
one
early
widget
sets
released
provides
nice
appearance
buttons
mini
command
language
probably
widely
used
xs
sony
widget
set
around
r
days
seemed
disappear
looked
like
promise
xw
hp
widgets
precursor
motif
originally
written
r
exists
diffs
get
work
r
r
pretty
good
widget
set
less
died
precursor
xray
toolkit
originally
implemented
xr
apparently
provided
much
experience
designers
xt
xo
widget
set
im
working
still
primitive
give
try
archivecisohiostateedupubxo
following
specialized
widgets
also
available
tbl
implements
tabular
layout
widgets
supports
motif
widgets
children
part
wcl
plots
athena
plotting
widgets
athena
widgets
contact
alternatives
intrinsics
name
language
vendor
xview
c
sun
oi
c
parcplace
interviews
c
stanford
tcltk
c
spriteberkeleyedu
however
much
like
c
admire
skill
designing
implementing
intrinsics
hopefully
alternative
develop
next
years
uses
object
oriented
language
keep
eyes
open
expect
change
time
language
c
starts
gaining
acceptance
pass
float
value
xtsetvalues
first
going
wrong
structure
arg
essentially
typdef
struct
string
name
long
value
arg
code
arg
arg
xtsetarg
arg
name
expands
arg
arg
argname
name
argvalue
see
normal
c
type
conversions
argvalue
gets
integer
instead
floating
point
value
value
copied
widget
resource
bit
pattern
wildly
different
required
floating
point
value
get
around
following
macro
athena
widgets
document
recomending
previous
suggestions
define
xtsetfloatargarg
n
sizeoffloat
sizeofxtargval
xtsetargarg
n
else
xtargval
ld
xtargval
xtsetargarg
n
ld
write
resource
converter
courtesy
rich
thomson
following
discussion
resource
converters
assumes
r
r
intrinsics
resource
converters
changed
r
r
allow
destructors
caching
converted
values
several
main
types
resource
converters
string
data
type
data
type
string
data
type
data
type
string
data
type
usually
string
data
type
converter
fixed
set
strings
converted
data
type
values
often
used
map
enumerated
names
enumerated
values
name
value
true
false
case
string
data
type
converter
needs
compare
resource
value
list
fixed
strings
readily
accomplished
use
quark
mechanism
resource
manager
resource
value
turned
quark
unique
representation
string
fits
single
word
resource
quark
compared
quarks
fixed
strings
representing
enumerated
values
many
enumerated
strings
converter
many
converters
small
number
enumeration
strings
global
initialization
routine
might
used
turn
resource
strings
quarks
way
first
time
one
converters
used
strings
turned
quarks
held
static
variables
use
next
invocation
one
converters
ii
data
type
string
type
converter
slightly
easier
string
data
type
converters
since
use
quarks
isnt
necessary
instead
data
type
value
simply
converted
string
value
probably
use
sprintf
data
type
string
converters
useful
applications
wish
convert
internal
data
type
value
string
write
valid
resource
specification
file
mechanism
used
provide
snapshot
application
state
file
snapshot
used
restore
program
known
state
via
usual
x
resource
database
mechanisms
taking
trouble
write
string
data
type
converter
isnt
much
extra
effort
write
data
type
string
converter
writing
time
helps
ensure
consistent
iii
data
type
data
type
type
converter
used
convert
existing
data
type
value
another
data
type
instance
x
pixel
value
converted
rgb
data
type
contains
separate
fields
red
green
blue
type
signature
resource
converter
follows
typedef
boolean
xttypeconverterdisplay
xrmvalueptr
cardinal
xrmvalueptr
xrmvalueptr
xtpointer
display
dpy
xrmvalueptr
args
cardinal
numargs
xrmvalueptr
fromval
xrmvalueptr
toval
xtpointer
converterdata
converter
invoked
fromval
argument
points
source
x
resource
manager
value
toval
argument
points
destination
x
resource
manager
value
converterdata
argument
opaque
pointer
converterspecific
data
specified
converter
registered
args
numargs
arguments
allow
extra
information
passed
converter
invoked
instance
pixel
rgb
structure
converter
discussed
would
need
colormap
visual
arguments
lookup
pixel
obtain
rgb
values
corresponding
pixel
care
must
taken
toval
argument
xrmvalue
following
type
definition
specifies
size
location
converted
value
typedef
struct
unsigned
int
size
caddrt
addr
xrmvalue
xrmvalueptr
converter
invoked
address
may
point
location
given
size
converted
value
location
null
former
case
converter
ensure
size
destination
area
large
enough
handle
converted
value
destination
area
large
enough
converter
set
size
amount
space
needed
return
false
caller
ensure
enough
space
allocated
reinvoke
converter
size
large
enough
converter
simply
copy
converted
value
space
given
return
true
location
null
converter
assign
location
address
static
variable
containing
converted
value
return
true
writing
group
converters
code
often
repeated
becomes
convenient
define
macro
define
donevar
type
tovaladdr
tovalsize
sizeoftype
tovalsize
sizeoftype
return
false
else
type
tovaladdr
var
else
tovaladdr
caddrt
var
tovalsize
sizeoftype
return
true
define
donestrstr
tovaladdr
tovalsize
sizeofstring
tovalsize
sizeofstring
return
false
else
tovaladdr
caddrt
str
tovalsize
sizeofstring
return
true
inside
converter
good
idea
perform
little
safety
checking
numargs
args
arguments
ensure
converter
called
properly
written
converter
need
register
intrinsics
intrinsics
invokes
resource
converters
creating
widgets
fetching
resource
values
resource
database
register
converter
single
application
context
use
xtappsettypeconverter
void
xtappsettypeconvertercontext
converter
args
numargs
cache
destructor
xtappcontext
context
string
string
xttypeconverter
converter
xtconvertarglist
args
cardinal
numargs
xtcachetype
cache
xtdestructor
destructor
register
converter
application
contexts
use
xtsettypeconverter
void
xtsettypeconverterfrom
converter
args
numargs
cache
destructor
string
string
xttypeconverter
converter
xtconvertarglist
args
cardinal
numargs
xtcachetype
cache
xtdestructor
destructor
r
intrinsics
routines
xtappaddconverter
xtaddconverter
superseded
xtappsettypeconverter
xtsettypeconverter
whenever
possible
newer
routines
used
converter
registered
intrinsics
cache
argument
specifies
converted
resource
values
cached
xtcachenone
dont
cache
converted
values
xtcacheall
cache
converted
values
xtcachebydisplay
cache
converted
values
per
display
basis
caching
converted
values
require
roundtrip
server
good
idea
instance
string
pixel
conversions
destructor
argument
routine
invoked
resource
destroyed
either
cached
reference
count
decremented
zero
widget
owning
value
destroyed
xtdestructor
following
type
definition
typedef
void
xtdestructorxtappcontext
xrmvalueptr
xtpointer
xrmvalueptr
cardinal
xtappcontext
context
xrmvalueptr
xtpointer
converterdata
xrmvalueptr
args
cardinal
numargs
destructor
invoked
free
auxiliary
storage
associated
argument
actually
free
storage
pointed
argument
toaddr
destructor
passed
extra
arguments
passed
converter
conversion
performed
instance
colormap
visual
arguments
string
pixel
converter
since
destructor
would
need
free
allocated
pixel
colormap
well
private
data
passed
converter
registered
sample
converter
code
found
following
files
mit
r
distribution
mitlibxtconvertersc
contriblibpextconvertersc
contriblibpextconvertersh
open
multiple
displays
see
multiuser
application
software
using
xt
x
resource
issue
summer
oliver
jones
complete
coverage
issues
involved
answer
based
article
nutshell
one
uses
xtopendisplay
add
display
single
application
context
xtclosedisplay
shutdown
display
remove
application
context
real
problems
occur
trying
close
display
happen
ways
user
selects
quit
button
one
displays
user
window
manager
send
wmdeletewindow
message
server
disconnect
possibly
killclient
message
server
shutdowncrash
network
failure
ill
assume
deal
gracefully
since
merely
problem
translating
widget
display
removing
display
read
oliver
jones
article
third
one
difficult
handle
following
based
oliver
jones
article
include
difficult
problem
difficulty
arises
xlib
design
presumed
io
error
always
unrecoverable
fatal
essentially
true
single
display
x
based
application
true
multiple
display
program
application
things
display
information
x
server
x
io
error
occurs
io
error
handler
called
returns
exit
happens
way
around
use
setjmplongjmp
avoid
returning
io
error
handler
following
code
fragment
demonstrates
include
setjmph
jmpbuf
xiorecover
void
xiohandler
dpy
display
dpy
destroydisplay
dpy
longjmp
xiorecover
main
setjmp
xiorecover
xsetioerrorhandler
xiohandler
xtappmainloop
appcontext
destroydisplay
something
given
display
pointer
go
back
application
specific
data
perform
necessary
cleanup
also
call
xtclosedisplay
unfamiliar
setjmplongjmp
setjmp
first
called
returns
saves
enough
information
jmpbuf
latter
execution
longjmp
return
program
state
setjmp
executed
return
value
second
setjmp
value
second
argument
longjmp
several
caveats
using
purpose
adequate
problems
might
run
resource
converters
improperly
cache
resources
likely
symptoms
xlib
errors
badcolor
badatom
badfont
may
problems
total
number
displays
open
since
typically
limited
number
file
descriptors
available
typical
value
may
also
run
authorization
problems
trying
connect
display
much
discussion
compwindowsx
topic
november
robert
scheifler
posted
article
basically
said
way
xlib
change
changed
r
r
r
addresses
changes
intrinsics
first
general
changes
release
described
certainly
incomplete
list
new
functions
added
others
deprecated
listed
brevity
primary
goal
much
following
information
retrieved
chapter
mit
xt
intrinsics
manual
oreilly
volume
rd
edition
r
r
addition
gadgets
windowless
widgets
new
resource
type
converter
interface
handle
cacheing
additional
data
variable
argument
list
interface
define
xtspecificationrelease
added
release
wmshellpart
toplevelshellpart
transientshellpart
changed
incompatibly
coreinitialize
coresetvalues
added
arglist
count
parameters
event
handlers
continuetodispatch
parameter
added
coresetvaluesalmost
specification
changed
corecompressexposure
changed
enumerated
data
type
boolean
coreclassinited
changed
enumerated
data
type
boolean
constraintgetvalueshook
added
extension
record
coreinitializehook
obsolete
info
passed
coreinitialize
shellrootgeometrymanager
added
extension
record
coresetvalueshook
obsolete
info
passed
coresetvalues
calling
xtquerygeometry
must
store
complete
geometry
added
unrealizecallback
xttranslatecoords
actually
works
r
r
r
psuedo
resource
basetranslation
added
searching
appdefault
files
made
flexible
customization
resource
added
perscreen
resource
database
support
permanently
allocated
strings
permanetly
allocated
strings
required
several
class
fields
args
argument
xtappinitialize
xtvaappinitialize
xtopendisplay
xtdisplayinitialize
xtinitialize
changed
cardinal
int
many
performance
improvements
summarized
article
xt
performance
improvements
release
gabe
begeddov
x
resource
issue
xrmstringtoquark
augmented
xrmpermstringtoquark
avoid
string
copies
several
fields
class
record
indicated
needing
permanent
strings
using
array
strings
resources
callback
lists
redesigned
use
less
memory
translation
manager
redesigned
rewritten
takes
less
memory
translation
tables
merges
faster
cache
action
bindings
keycode
keysyms
cached
better
sharing
gcs
modifiable
fields
window
widget
translation
uses
less
space
faster
malloc
space
widget
name
since
quark
available
widget
space
allocated
include
constraints
several
example
programs
reduction
memory
usage
functions
new
r
xtallocategc
sharable
gc
modifiable
fields
xtgetactionlist
get
action
table
class
xtscreendatabase
return
resource
database
screen
xtsetlanguageproc
register
language
procedure
called
set
locale
functions
new
r
xtappaddactionhook
procedure
call
every
action
xtappinitialize
lots
initialization
work
xtappreleasecacherefs
decrement
cache
reference
count
converter
xtappsetfallbackresources
specify
default
resources
xtappsettypeconverter
register
new
style
converter
xtcallcallbacklist
directly
execute
callback
list
xtcallconverter
invoke
new
style
converter
xtcallbackreleasecacheref
release
cached
resource
value
xtcallbackreleasecachereflist
release
list
cached
resource
values
xtconvertandstore
find
call
resource
converter
xtdirectconvert
invoke
oldstyle
converter
xtdisplayofobject
return
display
xtdisplaystringconversionwarning
issue
warning
conversion
xtfindfile
find
file
xtgetactionkeysym
retrieve
keysym
modifies
action
xtgetapplicationnameandclass
return
name
class
xtgetconstraintresourcelist
get
constraints
widget
xtgetkeysymtable
return
keycodetokeysym
mapping
table
xtgetmulticlicktime
read
multiclick
time
xtgetselectionrequest
retrieve
selectionrequest
event
xtgetselectionvalueincremental
obtain
selection
value
incrementally
xtgetselectionvaluesincremental
obtain
selection
value
incrementally
xtinitializewidgetclass
initialize
widget
class
manually
xtinserteventhanlder
register
event
handler
beforeafter
others
xtinsertraweventhandler
register
event
handler
without
modify
input
mask
xtisobject
test
subclass
object
xtisrectobj
test
subclass
rectobj
xtkeysymtokeycodelist
return
list
keycodes
xtlasttimestampprocessed
retrieve
recent
event
time
xtmenupopdown
action
popping
widget
xtmenupopup
action
popping
widget
xtoffsetof
macro
structure
offsets
xtownselectionincremental
make
selection
data
availabe
incrementally
xtpoupspringloaded
map
springloaded
popup
xtregistergrabaction
indicate
action
procedure
needs
passive
grab
xtremoveactiohhook
remove
function
called
every
action
xtresolvepathname
find
file
xtscreenofobject
return
screen
object
xtsetmulticlicktime
set
multiclick
time
xtsetwmcolormapwindows
set
wmcolormapwindows
custom
colormaps
xtungrabbutton
cancel
passive
button
grab
xtungrabkey
cancel
passive
key
grab
xtungrabkeybard
release
active
keyboard
grab
xtungrabpointer
release
active
pointer
grab
xtva
varags
interfaces
bunch
functions
xtwindowofobject
return
window
nearest
widget
ancestor
deprecated
replacement
xtaddactions
xtappaddactions
r
xtaddconverter
xtappaddconverter
r
xtaddinput
xtappaddinput
r
xtaddtimeout
xtappaddtimeout
r
xtaddworkproc
xtappaddworkproc
r
xtconvert
xtconvertandstore
r
xtcreateapplicationshell
xtappcreateshell
r
xtdestroygc
xtreleasegc
r
xterror
xtapperror
r
xtgeterrordatabase
xtappgeterrordatabase
r
xtgeterrordatabasetext
xtappgeterrordatabasetext
r
xtgetselectiontimeout
xtappgetselectiontimeout
r
xtinitialize
xtappinitialize
r
xtmainloop
xtappmainloop
r
menupopdownaction
xtmenupopdownaction
r
menupopupaction
xtmenupopupaction
r
xtnextevent
xtappnextevent
r
xtpeekevent
xtapppeekevent
r
xtpending
xtapppending
r
xtseterrorhandler
xtappseterrorhandler
r
xtseterrormsghandler
xtappseterrormsghandler
r
xtsetselectiontimeout
xtappsetselectiontimeout
r
xtsetwarninghandler
xtappsetwarninghandler
r
xtsetwarningmsghandler
xtappsetwarningmsghandler
r
xtwarning
xtappwarning
r
xtwarningmsg
xtappwarningmsg
r
resources
loaded
resources
widget
filled
following
places
highest
priority
lowest
priority
args
passed
creation
time
command
line
arguments
users
per
host
defaults
file
users
defaults
file
users
per
application
default
file
system
wide
per
application
default
file
note
read
application
startup
result
steps
single
resource
database
used
queries
per
host
defaults
file
contains
customizations
applications
executing
specific
computer
file
either
specified
xenvironment
environment
variable
set
file
homexdefaultshost
used
user
defaults
file
either
obtained
resourcemanager
property
root
window
display
set
file
homexdefaults
used
typically
program
xrdb
used
set
resourcemanager
property
please
note
kept
relatively
small
client
connects
display
must
transfer
property
size
around
kbyte
reasonable
toolkits
may
track
changes
resourcemanager
user
may
many
per
application
default
files
containing
customizations
specific
application
intrinsics
quite
flexible
file
found
read
next
part
describes
various
environment
variables
effect
file
found
system
wide
per
application
default
files
typically
found
usrlibxappdefaults
file
found
fallback
resources
used
intrinsics
quite
flexible
file
found
read
next
part
describes
various
environment
variables
effect
file
found
thanks
oliver
jones
following
use
several
environment
variables
control
resources
loaded
xtbased
programs
xfilesearchpath
xuserfilesearchpath
xapplresdir
environment
variables
control
xt
looks
applicationdefaults
files
application
initializing
xt
loads
one
appdefaults
file
path
defined
xfilesearchpath
another
path
defined
xuserfilesearchpath
set
xfilesearchpath
software
installed
system
way
appdefaults
files
appear
several
different
directory
hierarchies
suppose
example
running
suns
open
windows
also
r
x
applications
installed
usrlibxappdefaults
could
set
value
like
xfilesearchpath
would
cause
xt
look
appdefaults
files
usrlibx
usropenwinlib
wherever
openwinhome
located
setenv
xfilesearchpath
usrlibxtnopenwinhomelibtn
value
environment
variable
colonseparated
list
pathnames
pathnames
contain
replacement
characters
follows
see
xtresolvepathname
n
value
filename
parameter
applications
class
name
value
file
type
case
literal
string
appdefaults
c
customization
resource
r
suffix
none
appdefaults
l
language
locale
codeset
eg
jajpeuc
l
language
part
l
eg
ja
territory
part
displays
language
string
c
codeset
part
displays
language
string
lets
take
apart
example
suppose
applications
class
name
myterm
also
suppose
open
windows
installed
usropenwin
notice
example
omits
localespecific
lookup
usrlibxtn
means
usrlibxappdefaultsmyterm
openwinhomelibtn
means
usropenwinlibappdefaultsmyterm
application
initializes
xt
tries
open
appdefaults
files
order
shown
soon
finds
one
reads
uses
stops
looking
others
effect
path
search
first
usrlibx
usropenwin
lets
consider
another
example
time
lets
set
xuserfilesearchpath
looks
file
mytermad
current
working
directory
myterm
directory
appdefaults
setenv
xuserfilesearchpath
nadhomeappdefaultsn
first
path
list
expands
mytermad
second
expands
homeappdefaultsmyterm
convenient
setting
debugging
follows
imake
convention
naming
appdefaults
file
mytermad
applications
source
directory
run
application
directory
working
still
resources
loaded
properly
note
looking
appdefault
files
xuserfilesearchpath
bizarre
reason
neither
type
file
suffix
defined
useless
r
theres
another
twist
may
specify
customization
resource
value
example
might
run
myterm
application
like
myterm
xrm
customization
color
one
pathname
specifications
value
usrlibxappdefaultsnc
expanded
pathname
would
usrlibxappdefaultsmytermcolor
c
substitution
character
takes
value
customization
resource
default
xfilesearchpath
compiled
xt
usrlibxltnc
r
usrlibxltnc
r
usrlibxtnc
r
usrlibxltn
usrlibxltn
usrlibxtn
note
sites
replace
usrlibx
projectroot
batch
default
settings
default
xuserfilesearchpath
also
compiled
xt
rootlnc
r
rootlnc
r
rootnc
r
rootln
rootln
rootn
root
either
value
xapplresdir
users
home
directory
xapplresdir
set
set
xuserfilesearchpath
value
default
xt
ignores
xapplresdir
altogether
notice
quick
dirty
way
making
application
find
appdefaults
file
current
working
directory
set
xapplresdir
single
dot
r
machinery
worked
differently
r
compatibilty
many
people
set
xapplresdir
value
dot
followed
slash
order
callbacks
executed
courtesy
donna
converse
intrinsics
library
guarantee
order
widget
writer
application
writer
ability
modify
entire
contents
callback
list
neither
one
currently
knows
intrinsics
guarantee
order
execution
application
programmer
rely
widget
writer
widget
writer
required
document
widget
add
remove
callbacks
list
effect
therefore
functionality
contained
callback
independent
functionality
contained
callbacks
list
even
though
xt
standard
definition
xtaddcallback
says
callbackname
specifies
callback
list
procedure
appended
may
infer
word
appended
callback
routines
called
order
added
callback
list
know
widget
visible
courtesy
donna
converse
building
widget
needs
know
visible
set
visible
interest
field
core
window
completely
obscured
core
visible
flag
goes
false
however
window
iconified
flag
stays
set
true
right
everything
implemented
correctly
demonstrates
deficiency
x
protocol
core
widget
reflecting
capabilities
protocol
deficiency
information
available
one
way
case
inconvenient
way
xt
specification
accurate
second
third
paragraphs
section
read
section
carefully
visible
field
change
response
iconification
visibilitynotify
event
received
window
goes
viewable
unviewable
widget
ancestor
unmapped
iconification
occurs
protocol
deficiency
visibility
state
viewable
state
specific
meanings
x
protocol
see
glossary
xlib
x
protocol
reference
manual
problem
mwm
something
else
needs
done
youll
see
window
manager
window
manager
problem
mwm
fastest
way
determine
window
iconified
application
writer
keep
track
global
boolean
action
routine
translations
mapnotify
unmapnotify
shell
widget
contains
custom
widget
custom
widget
writer
see
mapstate
field
returned
call
xgetwindowattributes
suggestions
reparent
widget
xt
ie
xtreparentwidget
cant
use
xtmalloc
xtfree
etc
unfortunately
code
calls
malloc
realloc
calloc
tends
ignore
possibility
returning
null
best
handled
something
like
ptr
type
malloc
sizeof
type
ptr
perror
malloc
xyzzy
exit
handle
common
case
intrinsics
define
functions
xtmalloc
xtcalloc
xtnew
xtnewstring
xtrealloc
use
standard
c
language
functions
malloc
calloc
realloc
execute
xterrormsg
null
value
returned
xt
error
handlers
supposed
return
effectively
exits
addition
xtrealloc
called
null
pointer
uses
xtmalloc
get
initial
space
allows
code
like
ptr
ptr
type
malloc
sizeof
type
else
ptr
type
realloc
ptr
sizeof
type
count
count
written
ptr
xtrealloc
ptr
sizeof
ptr
count
also
xtfree
accepts
null
pointer
argument
generally
ive
found
xt
functions
conveniant
use
however
anytime
im
allocating
anything
potentially
large
use
standard
functions
fully
recover
enough
memory
errors
xtnew
xtnewstring
conveniant
macros
allocating
structure
copying
string
struct
abc
xyzzy
char
ptr
char
str
abcdef
xyzzy
xtnew
struct
abc
takes
care
type
casting
ptr
xtnewstring
str
strict
interpretation
intrinsics
reference
manual
allow
implementation
provide
functions
exchangable
malloc
free
ie
code
char
ptr
ptr
xtmalloc
free
ptr
may
work
personally
id
call
implementation
broken
complain
vendor
common
error
motif
programmers
use
xtfree
string
really
using
xmstringfree
debug
xt
application
first
id
recomend
getting
purify
pure
software
great
package
tracing
memory
problems
suns
bit
pricey
id
still
recomend
excuse
marketing
blurb
contact
info
purify
inserts
additional
checking
instructions
directly
object
code
produced
existing
compilers
instructions
check
every
memory
read
write
performed
program
test
detect
several
types
access
errors
reading
unitialized
memory
writing
past
mallocd
bounds
writing
freed
memory
purify
inserts
checking
logic
code
program
including
third
party
vendor
objectcode
libraries
verifies
system
call
interfaces
addition
purify
tracks
memory
usage
identifies
individual
memory
leaks
using
novel
adaption
garbage
collection
techniques
purifys
nearly
comprehensive
memory
access
checking
slows
target
program
typically
factor
two
five
alternative
package
isnt
pricey
sun
runs
many
unixs
pretty
similar
features
sentinel
debugging
environment
replaces
malloc
several
c
library
functions
add
additional
checks
contact
info
next
getting
sort
xlib
error
youll
need
run
synchronous
mode
easily
accomplished
sync
command
line
argument
setting
variable
xdebug
debugger
set
break
point
exit
let
trace
back
original
xlib
function
called
dont
run
synchronous
mode
actual
error
may
occured
number
calls
xlib
previously
since
xlib
calls
buffered
replies
server
asynchronous
next
trouble
window
layout
use
undocumented
resource
xtidentifywindows
class
resource
xtdebug
cause
widget
name
identified
window
example
example
xload
xrm
xtdebugtrue
example
xwininfo
tree
click
new
xload
window
give
normal
information
widget
name
class
window
included
help
checking
location
size
errant
widgets
next
trouble
geometry
managers
want
test
way
widget
manages
children
try
exportlcsmiteducontriblibxtgeotarz
acts
filter
children
geometry
manager
checks
behaviour
clever
idea
unfortunate
problem
debugging
callback
application
executing
grab
keyboard
mouse
pulldown
menu
server
effectively
locks
youll
need
go
another
machine
kill
debugger
manually
server
locks
application
debugged
said
one
else
access
keyboard
application
stopped
waiting
debugger
waiting
commands
unfortunately
cant
give
input
going
application
stopped
best
way
debug
kind
problem
two
machines
desk
running
program
debugger
environment
one
machine
running
application
possibly
using
command
sequence
like
othermachine
xhost
thismachine
thismachine
setenv
display
othermachine
thismachine
gdb
application
favorite
debugger
othermachine
xhost
thismachine
thismachine
gdb
application
gdb
set
environment
display
othermachine
gdb
run
believe
codecenter
c
interpretergraphical
debugger
method
dealing
explicitely
calling
xlib
functions
release
grabs
breakpoints
debugging
widget
problems
requires
pretty
good
debugging
skills
knowledge
widgets
work
go
long
way
without
knowing
internals
particular
widget
far
without
understanding
widget
works
judicious
use
conditional
breakpoints
adding
print
statements
debugger
help
great
deal
dont
xtaddinput
xtaddtimeout
xtaddworkproc
work
got
delicate
problem
three
routines
xtaddinput
xtaddtimeout
xtaddworkproc
problem
use
application
seem
registred
properly
made
handy
little
testprogram
everything
works
perfect
real
application
nothing
happens
introduction
r
xtapp
functions
obsoleted
routines
see
q
changes
r
r
r
happens
use
default
application
context
different
one
may
created
since
events
timeouts
distributed
per
application
context
basis
using
two
application
contexts
wont
get
events
example
cnt
toplevel
xtappinitializeapp
class
desc
xtnumber
desc
argc
argv
fallback
args
cnt
xtaddtimeout
xtaddworkproc
xtappmainloop
app
would
never
invoke
timeout
implement
drag
drop
courtesy
roger
reynolds
feb
dragndrop
buzzword
moving
data
clients
intuitive
fashion
motif
version
supports
dragndrop
capabilities
openlook
supported
dnd
along
two
protocols
compatable
far
know
published
wrote
package
called
rdd
designed
flexible
public
protocol
drag
n
drop
operations
clients
intention
provide
tool
would
make
easy
people
support
standard
dragndrop
protocol
programs
develop
contribute
sell
regardless
widget
set
used
long
based
xt
implementation
based
upon
understanding
icccm
conventions
details
read
code
heard
dozens
people
using
rdd
like
feel
works
whole
lot
better
motif
stuff
also
seem
many
think
neat
constrained
use
motif
anyway
latest
rdd
stuff
available
ftp
netcomcom
pubrogerr
possibly
older
version
also
available
exportlcsmitedu
contrib
pete
ware
cis
dept
ohio
state
university
w
bolz
hall
neil
ave
h
columbus
oh
