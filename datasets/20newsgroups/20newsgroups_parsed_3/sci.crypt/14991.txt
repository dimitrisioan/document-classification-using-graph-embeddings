subject
lga
ncrypt
sourc
i
got
a
number
of
request
for
code
so
here
it
is
it
written
in
x
asm
borland
tasm
will
do
tasm
lgaasm
tlink
t
lgaasm
the
code
lga
ncryption
c
by
nick
nassuphi
code
segment
assum
cscode
dscode
org
h
start
jmp
begin
ga
particl
assig
bit
particl
move
east
bit
particl
move
west
bit
particl
move
north
bit
particl
move
south
bit
particl
move
east
bit
particl
move
west
bit
particl
move
north
bit
particl
move
south
collisiong
rule
ga
rule
if
e
w
and
n
s
then
ewn
if
n
s
and
e
w
then
nsew
for
nibbl
and
for
byte
reflect
rule
just
swap
bit
along
direct
thi
lookup
tabl
implement
two
particl
collis
for
the
hpp
lattic
ga
hpprule
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
thi
rule
implement
the
velocityrevers
need
to
run
the
ga
evolut
in
revers
it
call
a
wallrul
becaus
it
the
same
a
is
all
particl
hit
a
wall
head
on
wallrul
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
db
b
maxbyt
equ
lineno
equ
srcptr
dw
offset
buffer
desptr
dw
offset
buffer
savebuff
db
maxbytelineno
dup
buffer
db
maxbytelineno
dup
db
dup
buffer
db
maxbytelineno
dup
db
dup
data
db
db
db
db
thi
is
a
test
for
a
lattic
ga
base
encrypt
db
algorithm
the
data
is
encod
a
particl
of
a
db
digit
ga
whose
time
evolut
is
then
simul
db
with
a
cellularautomaton
type
algorithm
decrypt
db
can
be
achiev
by
run
the
simul
in
revers
db
a
thermodynam
argument
ensur
that
even
if
a
singl
db
bit
is
flip
no
decrypt
of
the
data
is
possibl
db
db
after
the
ga
is
let
to
evolv
for
timestep
db
one
can
either
run
the
revers
evolut
by
press
db
space
or
flip
a
bit
and
then
run
by
press
db
db
for
a
cryptograph
applic
the
key
would
consist
db
of
the
number
of
time
step
and
the
time
and
locat
db
of
specif
bit
invers
db
db
db
db
db
fill
the
ga
with
a
piec
of
code
initga
mov
dicssrcptr
mov
sioffset
data
mov
cxlineno
ig
push
di
push
cx
mov
cxmaxbyt
ig
mov
alcssi
mov
csdial
inc
si
inc
di
loop
ig
pop
cx
pop
di
add
dimaxbyt
loop
ig
mov
sicssrcptr
mov
dioffset
initga
mov
cxmaxbyt
mov
al
lg
mov
byte
ptr
cssial
not
al
inc
si
loop
lg
ret
display
ga
molecul
bounc
around
showga
push
e
push
si
push
di
push
cx
push
bx
mov
axbh
mov
esax
mov
sicssrcptr
mov
di
mov
cxlineno
add
simaxbyt
sg
push
cx
push
di
mov
cxmaxbyt
sg
mov
alcssi
mov
byte
ptr
esdial
inc
si
add
di
dec
cx
jnz
sg
pop
di
pop
cx
add
di
loop
sg
pop
bx
pop
cx
pop
di
pop
si
pop
e
ret
cssi
sour
of
data
csdi
destin
of
data
scanonemiddlelin
first
byte
is
a
special
case
becaus
of
warparound
mov
bl
al
is
the
assembl
byte
mov
bhcssimaxbyt
north
is
one
line
up
lower
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbyt
south
is
one
line
down
higher
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssimaxbyt
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssi
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
middl
byte
can
be
handl
in
a
loop
mov
cxmaxbyt
sol
mov
bl
al
is
the
assembl
byte
mov
bhcssimaxbyt
north
is
one
line
up
lower
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbyt
south
is
one
line
down
higher
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssi
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssi
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
loop
sol
last
byte
is
also
special
mov
bl
al
is
the
assembl
byte
mov
bhcssimaxbyt
north
is
one
line
up
lower
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbyt
south
is
one
line
down
higher
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssi
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssimaxbyt
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
ret
cssi
sour
of
data
csdi
destin
of
data
scanfirstlin
first
byte
is
a
special
case
becaus
of
warparound
mov
bl
mov
bhcssimaxbytelineno
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbyt
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssimaxbyt
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssi
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
middl
byte
can
be
handl
in
a
loop
mov
cxmaxbyt
sfl
mov
bl
al
is
the
assembl
byte
mov
bhcssimaxbytelineno
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbyt
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssi
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssi
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
loop
sfl
last
byte
is
also
special
mov
bl
al
is
the
assembl
byte
mov
bhcssimaxbytelineno
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbyt
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssi
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssimaxbyt
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
ret
cssi
sour
of
data
csdi
destin
of
data
scanlastlin
first
byte
is
a
special
case
becaus
of
warparound
mov
bl
al
is
the
assembl
byte
mov
bhcssimaxbyt
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbytelineno
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssimaxbyt
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssi
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
middl
byte
can
be
handl
in
a
loop
mov
cxmaxbyt
sll
mov
bl
al
is
the
assembl
byte
mov
bhcssimaxbyt
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbytelineno
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssi
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssi
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
loop
sll
last
byte
is
also
special
mov
bl
al
is
the
assembl
byte
mov
bhcssimaxbyt
and
bhb
and
at
bit
and
or
blbh
or
them
into
the
assembl
byte
mov
bhcssimaxbytelineno
and
bhb
and
at
bit
and
or
blbh
place
the
stuff
into
al
mov
bhcssi
west
is
one
byte
left
lower
and
bhb
and
at
bit
and
or
blbh
mov
bhcssimaxbyt
east
is
one
byte
right
higher
and
bhb
and
at
bit
and
or
blbh
mov
bh
mov
albyt
ptr
csbx
offset
hpprule
mov
csdial
inc
si
inc
di
ret
invert
all
veloc
in
the
ga
invertal
push
bx
push
cx
push
si
mov
sicssrcptr
mov
bx
mov
cxlineno
ia
push
cx
mov
cxmaxbyt
ia
mov
blcssi
mov
albyt
ptr
csbx
offset
wallrul
mov
cssial
inc
si
loop
ia
pop
cx
loop
ia
pop
si
pop
cx
pop
bx
ret
iterateonc
mov
sicssrcptr
mov
dicsdesptr
mov
cssrcptrdi
mov
csdesptrsi
push
si
push
di
call
scanfirstlin
pop
di
pop
si
add
simaxbyt
add
dimaxbyt
mov
cxlineno
dont
scan
first
and
last
l
push
si
push
di
push
cx
call
scanonemiddlelin
pop
cx
pop
di
pop
si
add
simaxbyt
add
dimaxbyt
loop
l
push
si
push
di
call
scanlastlin
pop
si
pop
di
l
ret
iter
hpp
rule
cx
time
iter
push
cx
call
iterateonc
pop
cx
call
showga
loop
iter
ret
iter
hpp
rule
cx
time
iterateuntil
mov
si
mov
cxoffset
iu
offset
iu
iu
mov
albyt
ptr
cssi
offset
iu
xor
byte
ptr
cssi
offset
iual
inc
si
loop
iu
iu
call
iterateonc
call
showga
mov
sicssrcptr
mov
cxmaxbyt
mov
bx
mov
ah
mov
al
iu
mov
blbyte
ptr
cssi
mov
dlbyte
ptr
csbxwallrul
not
ah
xor
dlah
and
aldl
inc
si
loop
iu
mov
si
mov
cxoffset
iu
offset
iu
iu
mov
ahbyt
ptr
cssioffset
iu
and
ahal
xor
byte
ptr
cssioffset
iuah
inc
si
loop
iu
jmp
iu
iu
mov
axoffset
iu
push
ax
ret
db
duph
iu
push
ax
push
bx
push
cx
push
dx
push
d
mov
ah
mov
dxcsmsgptr
int
h
pop
d
pop
dx
pop
cx
pop
bx
pop
ax
ret
db
duph
msgptr
dw
offset
msg
msg
db
thi
messag
is
print
out
by
db
code
decrypt
use
data
from
the
lattic
db
which
wa
appli
to
the
decod
routin
db
after
everi
time
step
db
the
decod
function
left
the
code
unchang
db
except
after
the
ga
evolut
had
completelli
db
revers
the
thermal
time
equ
repetit
are
enough
to
equilibr
the
ga
begin
mov
axh
mov
bh
mov
dh
mov
dl
mov
cx
int
h
mov
ah
mov
bh
mov
dh
mov
dl
int
h
call
initga
call
showga
mov
ah
int
h
push
cx
mov
cxtime
call
iter
call
invertal
call
showga
mov
ah
int
h
cmp
al
jne
begin
mov
sicssrcptr
xor
byte
ptr
cssib
begin
mov
cxtime
call
iterateuntil
call
invertal
call
showga
mov
axch
int
h
code
end
end
start
